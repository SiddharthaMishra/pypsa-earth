apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate  
metadata:
  name: pypsa-workflow-template
spec:
  ttlStrategy:
    secondsAfterCompletion: 10000 
    secondsAfterSuccess: 50000
    secondsAfterFailure: 500000
  templates:
  - name: pypsa-workflow
    steps:
    - - name: prepare-networks
        template: prepare-networks
    
    # - - name: solve-networks
    #     template: solve-networks
    #     withParam: "{{steps.prepare-networks.outputs.parameters.prepared_network_opts}}"
    # - - name: solve-networks
    #     template: solve-networks
    #     arguments:
    #       artifacts:
    #       - name: input
    #         from: "{{steps.generate.outputs.artifacts.fan-out-artifacts}}"
    #         subPath: "{{item}}" # <<< This selects a single file from the fan out
    #       parameters:
    #       - name: text
    #         value: "{{item}}"
    #     # This withParam iterates through the output from the previous step
    #     withParam: "{{steps.generate.outputs.result}}"
    # - - name: fan-in
    #     template: fan-in

  # Step to generate the output sequence
  #
  # In this step, we write multiple artifacts to a target-folder on the
  # artifact directory: fanout-{{workflow.name}}
  #
  # In addition, we output the filenames through the python script as a
  # JSON-complaint array of strings. This will look like so:
  # ["file1.txt","file2.txt","file3.txt"]
  #
  # This array serves as fan-out argument that argo will iterate over.
  - name: prepare-networks
    container:
      image: "{{ workflow.parameters.pypsa_image_path }}"
      command: ["conda"]
      args: ["run", "-n", "pypsa-earth", "./run.sh"]
      env:
        - name: RUN_FOLDER_NAME
          value: "{{ workflow.parameters.run_folder_name }}"
        - name: IS_TEST_RUN
          value: "true"
        - name: SUBCOMMAND
          value: "prepare_networks"
        - name: GOOGLE_APPLICATION_CREDENTIALS
          valueFrom:
            secretKeyRef:
              name: creds
              key: GOOGLE_APPLICATION_CREDENTIALS
    outputs:
      parameters:
      - name: prepared_network_opts
        valueFrom:
          path: /tmp/prepared_network_opts.txt

 
  - name: solve-networks
    inputs:
      parameters:
      - name: prepared_network_opts
    container:
      image: "{{ workflow.parameters.pypsa_image_path }}"
      command: ["conda"]
      args: ["run", "-n", "pypsa-earth", "./run.sh"]
      env:
        - name: PREPARED_NETWORK_OPTS
          value: "{{inputs.parameters.prepared_network_opts}}"
        - name: RUN_FOLDER_NAME
          value: "{{ workflow.parameters.run_folder_name }}"
        - name: IS_TEST_RUN
          value: "true"
        - name: SUBCOMMAND
          value: "run"
        - name: GOOGLE_APPLICATION_CREDENTIALS
          valueFrom:
            secretKeyRef:
              name: creds
              key: GOOGLE_APPLICATION_CREDENTIALS
      